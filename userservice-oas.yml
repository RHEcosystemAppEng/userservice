openapi: 3.0.3
info:
  title: UserService - OpenAPI 3.0
  description: |-
    UserService for Keycloak
  contact:
    email: tbd@redhat.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.0.1
servers:
  - url: https://userservice.appeng.redhat.com/api/v1
tags:
  - name: user
    description: Operations about user
  - name: usersearch
    description: Operations about user searches
  - name: token
    description: Operations about oidc token
paths:
  /findusers:
    post:
      tags: 
        - usersearch
      summary: Find users based on input search criteria
      operationId: findUsers
      security:
        - bearerAuth: []
      requestBody:
        description: User object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindUsersCriteria'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/FindUsersCriteria'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FindUsersResponse'
  /findusercount:
    post:
      tags: 
        - usersearch
      summary: Find count of users based on input search criteria
      operationId: findUserCount
      security:
        - bearerAuth: []
      requestBody:
        description: User object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindUsersCriteria'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/FindUsersCriteria'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSearchCountResponse'
  /user/{username}:
    get:
      tags:
        - usersearch
      summary: Get user by user name
      operationId: getUserByName
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/usernameParam"
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      operationId: updateUser
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/usernameParam"
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      operationId: deleteUser
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/usernameParam"
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  
  /token:
    post:
      tags:
        - token
      summary: Get access token with password grant
      operationId: getToken
      requestBody:
        description: Request body to get access token with password grant
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRequestBody'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /user:
    post:
      tags:
        - user
      summary: Create user
      operationId: createUser
      security:
        - bearerAuth: []
      requestBody:
        description: User object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          example: 28718e03-721d-40b4-8eea-dd299738aa14
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        enabled:
          type: boolean
          example: true
        email:
          type: string
          example: john@yourcompany.com
        emailVerified:
          type: boolean
          example: true
        userAttributes: # e.g. a map with key value pairs: orgid=redhat, org_admin=true, is_internal=false, type=privileged
          type: object
          additionalProperties: true
        clientRoles:
          type: object
          additionalProperties: true
    FindUsersCriteria:
      type: object
      properties:
        id:
          type: string
          example: 28718e03-721d-40b4-8eea-dd299738aa14
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        enabled:
          type: boolean
          example: true
        email:
          type: string
          example: john@yourcompany.com
        emailVerified:
          type: boolean
          example: true
        userAttributes: # e.g. a map with key value pairs: orgid=redhat, org_admin=true, is_internal=false, type=privileged
          type: object
          additionalProperties: true
        clientRoles:
          type: object
          additionalProperties: true
    FindUsersResponse:
      type: array
      items:
        $ref: '#/components/schemas/User'
    UserSearchCountResponse:
      type: object
      properties:
        count:
          type: integer
          example: 234
    TokenRequestBody:
      type: object
      properties:
        username:
          type: string
          example: theUser
        password:
          type: string
          example: changeIt
        grant_type:
          type: string
          example: password
        client_id:
          type: string
          example: user-service-admin
        scope:
          type: string
          example: openid
    Token:
      type: object
      properties:
        access_token:
          type: string
          example: eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICIxSkt3QWZYUzEzbmR0T25zSTVLd0cyQ2NGUHNUWGFKdkFLZHcwcktQMkNNIn0.eyJleHAiOjE2ODI5NTU5ODIsImlhdCI6MTY4Mjk1NTkyMiwianRpIjoiODZkMTE0NzktZDE1NC00ODRkLTgzZjMtODU1YzUxOGMwZjNiIiwiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDo4MDgwL3JlYWxtcy9tYXN0ZXIiLCJzdWIiOiI0MjBmZGIyMS0zMzA0LTRiZjQtOGZiNC01NWNlNDhlYzg0MmMiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJhZG1pbi1jbGkiLCJzZXNzaW9uX3N0YXRlIjoiMTQ5MmZjMjQtMjFkNi00OWQ0LTg1ZmEtNDMzNTFmOTdlMzI5IiwiYWNyIjoiMSIsInNjb3BlIjoiZW1haWwgcHJvZmlsZSIsInNpZCI6IjE0OTJmYzI0LTIxZDYtNDlkNC04NWZhLTQzMzUxZjk3ZTMyOSIsImVtYWlsX3ZlcmlmaWVkIjpmYWxzZSwicHJlZmVycmVkX3VzZXJuYW1lIjoiYWRtaW4ifQ.kBfOA85FMoU9G8E6hf7C3F1iDt-Sov3I8t6RwaK8F1ehZZdEPNgdP_g3pQ65lKA1FrkHMGjhPn5ZIHtk7UlWArxXVHyVTWANbt-wlAcpQsdxPs9CeUfjdR_sFlPBlRNF7oxALRbptHaZs4C90orHsg7aN6x3uaERRsoaVo5_b4li59BVdVJ5OSiTi-XHbyPgzCyGibl9K5cFMR1GPLQEecrSVk5jeweMQExw7EZk9dYZDdnpoGCHgSoOk6RJ5pwzCuOv7K5e_B_bNsD-povEoHICJAcjzl23cHRz9-VIGFT71MGUTFoWOnuWDo5FmkeE0o9ZmnEUcyZtxnr9UJc0TA
        expires_in:
          type: integer
          example: 60
        refresh_expires_in:
          type: integer
          example: 1800
        refresh_token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICIxODdhYWMxOC1iOTY0LTRkZjAtOGFkNS00M2Y2ZGQxYzQ1MDEifQ.eyJleHAiOjE2ODI5NTc3MjIsImlhdCI6MTY4Mjk1NTkyMiwianRpIjoiNGQ5Mjc2YmEtMGJhNi00ZjA1LWFkMTUtMWI2NTJkNjNhZDY0IiwiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDo4MDgwL3JlYWxtcy9tYXN0ZXIiLCJhdWQiOiJodHRwOi8vbG9jYWxob3N0OjgwODAvcmVhbG1zL21hc3RlciIsInN1YiI6IjQyMGZkYjIxLTMzMDQtNGJmNC04ZmI0LTU1Y2U0OGVjODQyYyIsInR5cCI6IlJlZnJlc2giLCJhenAiOiJhZG1pbi1jbGkiLCJzZXNzaW9uX3N0YXRlIjoiMTQ5MmZjMjQtMjFkNi00OWQ0LTg1ZmEtNDMzNTFmOTdlMzI5Iiwic2NvcGUiOiJlbWFpbCBwcm9maWxlIiwic2lkIjoiMTQ5MmZjMjQtMjFkNi00OWQ0LTg1ZmEtNDMzNTFmOTdlMzI5In0.WnmKcLPbO29jUet1fcYBRtV_jS4wrJkS1FzOe-BWliQ
        token_type:
          type: string
          example: Bearer
        not-before-policy:
          type: integer
          example: 0
        session_state:
          type: string
          example: 1492fc24-21d6-49d4-85fa-43351f97e329
        scope:
          type: string
          example: email profile
    Error:
      type: object
      properties:
        error:
          type: string
          example: invalid_grant
        error_description:
          type: string
          example: Invalid user credentials
          
          
  parameters:
    usernameParam:
      in: path 
      name: username
      example: theUser
      description: 'The username that needs to be fetched.'
      required: true
      schema:
        type: string
    userIdParam:
      in: path 
      name: userId
      example: 28718e03-721d-40b4-8eea-dd299738aa14
      description: 'The user id of the user.'
      required: true
      schema:
        type: string
    realmNameParam:
      in: path 
      name: realmName
      example: demoRealm
      description: 'Realm name.'
      required: true
      schema:
        type: string
    realmIdParam:
      in: path 
      name: realmId
      example: c4db55e3-5ffe-4850-a1c1-17e1ea7d930c
      description: 'Realm id.'
      required: true
      schema:
        type: string
    groupNameParam:
      in: path
      name: groupName
      example: demoGroup
      description: 'Group name.'
      required: true
      schema:
        type: string
    groupIdParam:
      in: path
      name: groupId
      example: 714c831c-761b-4620-bdcf-15ede33b89de
      description: 'Group id.'
      required: true
      schema:
        type: string        
    bearerTokenHeader:
      in: header
      name: bearerToken
      example: eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICIyVlhGVmE2aVNWSVR3cE0tc1pyVi1TYUtXamlDQ1VUd2RIbHdaakVmalV3In0.eyJleHAiOjE2ODI2MTQ2MDIsImlhdCI6MTY4MjYxMjgwMiwianRpIjoiMDFhMjI3YTYtYTlhNi00MWMxLThlODktMDA3MmJhMDJlZTg4IiwiaXNzIjoiaHR0cHM6Ly9rZXljbG9hay1wb3N0Z3Jlcy1vcGVyYXRvci5hcHBzLWNyYy50ZXN0aW5nL3JlYWxtcy9tYXN0ZXIiLCJzdWIiOiJkYmI3YzQwYy0wMzM2LTRkYmYtYjgwOS0xN2Q1YjIxNTdjNDciLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJhZG1pbi1jbGkiLCJzZXNzaW9uX3N0YXRlIjoiZTAzYTY5YTQtNGVmZC00M2UzLWE5ZDUtYTUyODM4MzAyNjhmIiwiYWNyIjoiMSIsInNjb3BlIjoiZW1haWwgcHJvZmlsZSIsInNpZCI6ImUwM2E2OWE0LTRlZmQtNDNlMy1hOWQ1LWE1MjgzODMwMjY4ZiIsImVtYWlsX3ZlcmlmaWVkIjpmYWxzZSwicHJlZmVycmVkX3VzZXJuYW1lIjoiYWRtaW4ifQ.PnewdVPCp8QflZ3ZYLq-8R3cjzAgSmnI0VldqKFA3i_iJCOhX4mxDLeTF3_HjMAvDFZtjQF_v3Q3PgQ11qHew0SmAeO3jtOsdCl-b9tooIfEMdSVvgiK_8RJeTmkZWpxm852XhWWbdlvL8vS7m2dLLvjXfFs4Qmn7C4xY8wCrYn0t_uC9WRdZVpOp6K-lG0kzpXUTrACUFW97hUohLMS3c28dEWlab6z97Od9gsnr4QxLB49jLyXyC0kAF8eUlXuO_q8aCOeaKlubCQk1Xuh9p2ZOqhUk5-oU7zPkbswCiw0zzaJRWq26iKHEW1qS1J0dqDIdASe2jTJ6Bt3tSzmvg
      description: 'Bearer token.'
      required: true
      schema:
        type: string
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT 